jlpm.extend("help", {
  0: "当前标签",
	aid: "辅助器",
	content: "当前标签的父标签",
	fn: {
		addClass: "追加CLASS类 \r\n _$(selector).addClass('classname classname ...'); \r\n 参数支持空格多名",
		after: "当前标签后插入 \r\n _$(selector).after(element);",
		append: "当前标签内追加 \r\n _$(selector).append(element);",
		attr: "设置或获取标签属性值 \r\n _$(selector).attr('name'[,'value']); 或 _$(selector).attr({name:value,name:value,...}); \r\n 参数只属性名称，返回该属性值",
		before: "当前标签前插入 \r\n _$(selector).before(element);",
		bind: "事件设置 \r\n _$(selector).bing('click',function(){});",
		bottom: "bottom值 \r\n _$(selector).bottom();",
		ce: "创建标签 \r\n _$(selector).ce('meta');",
		children: "获取标签内所有子标签,不包括textnode \r\n _$(selector).children();",
		choose: "获取对象中符合条件的子对象 \r\n _$(selector).choose(0); 或 _$(selector).choose(selector);",
		clone: "克隆标签 \r\n _$(selector).clone(true|false);",
		css: "设置或获取标签样式值 \r\n _$(selector).css(''[,'']); 或 _$(selector).css({name:value,name:value,...}); \r\n 参数只样式名称，返回该样式值",
		delegate: "事件代理 \r\n _$(selector).delegate('li','click',function(){});",
		domFind: "标签选择器 \r\n _$(selector).domFind(selector).click(function(){}); \r\n 例子中第一个selector被第二个代替",
		each: "循环,类似于for循环 \r\n _$(selector).each(function(){});",
		empty: "清空标签中的子标签 \r\n _$(selector).empty();",
		first: "取标签中的第一个标签 \r\n _$(selector).first();",
		height: "获取对象的高度值 \r\n _$(selector).height();",
		hide: "隐藏对象 \r\n _$(selector).hide();",
		html: "设置或获取标签的HTML代码 \r\n _$(selector).html([code]); \r\n 可选参数未传入时返回对象内部的HTML代码,反之设置",
		innerHeight: "获取对象内部高度 \r\n _$(selector).innerHeight();",
		innerWidth: "获取对象内部宽度 \r\n _$(selector).innerWidth();",
		last: "获取标签内最后的子标签 \r\n _$(selector).last();",
		left: "获取对象的LEFT值 \r\n _$(selector).left();",
		keys: "枚举出的属性的列表 \r\n _$(selector).keys();",
		next: "获取标签的同父下一标签 \r\n _$(selector).next();",
		nextAll: "获取标签的同父后面的所有标签 \r\n _$(selector).nextAll();",
		noConflict: "使用 noConflict() 方法为 jlpm 变量规定新的名称 \r\n var jl=jlpm.noConflict();",
		oddevenInt: "获取奇偶对象 \r\n _$(selector).oddevenInt(true|false);",
		off: "取消事件或事件代理 \r\n _$(selector).off('click'[,'li']); \r\n 可选参数未传入时取消事件，反之取消事件代理",
		on: "设置事件或事件代理 \r\n _$(selector).on('click'[,'li'],function(){}); \r\n 可选参数未传入时设置事件，反之设置事件代理",
		outerHeight: "获取对象外部高度 \r\n _$(selector).outerHeight();",
		outerWidth: "获取对象外部宽度 \r\n _$(selector).outerWidth();",
		parent: "获取标签的父标签 \r\n _$(selector).parent();",
		parents: "获取标签所有的父标签 \r\n _$(selector).parents([selector]); \r\n 可选参数未传入时返回所有父标签，反之返回符合条件的父标签",
		prepend: "标签内插入首标签 \r\n _$(selector).prepend(element);",
		prev: "获取标签的同父上一个标签 \r\n _$(selector).prev();",
		prevAll: "获取标签的同父前面所有的标签 \r\n _$(selector).prevAll();",
		ready: "页面标签加载完成后执行 \r\n _$(document).ready(function(){});",
		remove: "删除标签 \r\n _$(selector).remove([element]); \r\n 可选参数未传入时删除selector本身，反之删除selector内的参数element",
		removeAttr: "删除属性 \r\n _$(selector).removeAttr('name');",
		removeClass: "删除样式类 \r\n _$(selector).removeClass('name name ...'); \r\n 可删除例子中格式多样式类",
		replace: "替换标签 \r\n _$(selector).replace(element);",
		right: "获取对象的right值 \r\n _$(selector).right();",
		scrollHeight: "获取对象的scrollHeight值 \r\n _$(selector).scrollHeight();",
		scrollLeft: "获取对象的scrollLeft值 \r\n _$(selector).scrollLeft();",
		scrollTop: "获取对象的scrollTop值 \r\n _$(selector).scrollTop();",
		scrollWidth: "获取对象的scrollWidth值 \r\n _$(selector).scrollWidth();",
		show: "显示对象 \r\n _$(selector).show();",
		siblings: "获取标签的同父所有的标签 \r\n _$(selector).siblings();",
		size: "获取对象的width、height、top、left的值 \r\n _$(selector).size().left;",
		textValue: "设置或获取标签的value或文本 \r\n _$(selector).textValue([value]); \r\n 可选参数未传入时返回标签的值，反之设置标签的值",
		toggle: "隐藏和显示切换 \r\n _$(selector).toggle();",
		toggleClass: "样式类切换 \r\n _$(selector).toggleClass('name name ...'); \r\n 如果已经包含样式类将删除样式类",
		top: "获取对象的top值 \r\n _$(selector).top();",
		unbind: "取消事件 \r\n _$(selector).unbind('name');",
		undelegate: "取消事件代理 \r\n _$(selector).undelegate('li','click');",
		values: "枚举出的属性值的列表 \r\n _$(selector).values();",
		width: "获取对象的width值 \r\n _$(selector).width();",
		wrap: "当前标签包裹到标签内，或被哪个标签包裹 \r\n _$(selector).wrap(element,true|false); \r\n true包裹到，反之"
	},
	isLocalStorage: "获取浏览器是否支持HTML5LocalStorage \r\n jlpm.isLocalStorage() \r\n 返回 true|false",
	len: "当前获取标签集或对象的长度 \r\n jlpm.len;",
	oldElement: "之前使用的标签或标签集 \r\n jlpm.oldElement;",
	ver: "框架内部版本 \r\n jlpm.ver",
	Ajax: {
		get: 'ajax get方法 \r\n jlpm.Ajax([{data:selector, \r\noninit:function(){console.log(data);return {status:true,info:"测试错误"};},...}])\r\n.get([""]); \r\n []内为可选参数',
		post: 'ajax post方法 \r\n jlpm.Ajax([{data:selector, \r\noninit:function(){console.log(data);return {status:true,info:"测试错误"};},...}])\r\n.post([""]); \r\n []内为可选参数'
	},
	Exec: "替代eval \r\n jlpm.Exec(object);",
	cache: "本地存储 localStorage 设置 \r\n jlpm.cache(key,value,boolean); \r\n 参数 value 为空，返回对应的值。key 为空，返回长度。\r\n key 为数字，返回索引对应的名称。全不为空，设置对应的值。\r\n boolean为设置是否永久保存还是类似sessionStorage关闭页面就会清除。",
	cacheRemove: "本地存储 localStorage 删除 \r\n jlpm.cacheRemove(key); \r\n 参数 key 为空，清空。不为空，删除指定项值。",
	cacheLen: "获取本地存储的条数 \r\n jlpm.cacheLen();",
	callbacks: "回调列表,顺序执行 \r\n jlpm.callbacks(options).add(function(){}).defer(function(){}, 1000).fire();",
	config: "配置外部插件 \r\n jlpm.config({aaa:function(){},bbb:{ccc:function(){}}});",
	contains: "判断a是否包含b \r\n jlpm.contains(a, b);",
	crDom: "创建标签,功能同ce() \r\n jlpm.crDom('<span></span>');",
	cutover: "当前使用的标签和之前使用的标签，使用时互换 \r\n jlpm.cutover(selector); \r\n 互换后将操作换后的标签",
	datetime: "返回格式性的时间 \r\n jlpm.datetime([12]).shortdate; \r\n 可选参数为24小时或12小时",
	dispose: "清空数组或对象 \r\n jlpm.dispose([array|object,]function(){});",
	each: "循环,类似于for循环 \r\n jlpm.each([array|object,]function(){});",
	eventFix: "event兼容性修复 \r\n jlpm.eventFix(event); \r\n 返回修复后的event",
	execConfig: "执行配置 \r\n jlpm.execConfig('aaa',function(){});",
	extend: "jlpm扩展功能 \r\n jlpm.extend(function(){},name); 或 jlpm.extend({aaa:function(){}});",
	formtojson: "form表单中的标签转成JSON \r\n jlpm.formtojson(form); \r\n 返回json对象",
	gWin: "获取标签的window \r\n jlpm.gWin(selector);",
	get: 'ajax get方法 \r\n jlpm.get(url, callback[, options]); \r\n []内为可选参数',
	getStyles: "用来获取元素中所有可用的css属性列表 \r\n jlpm.getStyles(elem);",
	grep: "除去了不需要的元素，生成新的对象 \r\n jlpm.grep(object, function(){});",
	hasAttr: "判断对象是否包含当前属性 \r\n jlpm.hasAttr('name', selector); \r\n 返回 true|false",
	hasClass: "判断对象是否包含当前样式类 \r\n jlpm.hasClass('name', selector); \r\n 返回 true|false",
	hasNode: "判断对象是否包含当前标签 \r\n jlpm.hasNode(element, selector); \r\n 返回 true|false",
	hasParent: "判断对象是否等于当对象的父标签 \r\n jlpm.hasParent(element, parent); \r\n 返回 true|false",
	hasData: "判断对象是否包含在当前对象内 \r\n jlpm.hasData(value, data); \r\n 返回 true|false",
	implement: "jlpm.prototype 扩展方法 \r\n jlpm.implement(key, value);",
	inArray: "获取对象在数组中的索引 \r\n jlpm.inArray(element,array);",
	index: "当前标签的组中INDEX或组总长度 \r\n jlpm.index(value, array); \r\n 可选参数未传入时返回长度，反之取索引值",
	isArray: "是否为数组 \r\n jlpm.isArray(value); \r\n 返回 true|false",
	isCdomain: "是否跨域 \r\n jlpm.isCdomain(value);",
	isDate: "是否为日期 \r\n jlpm.isDate(value); \r\n 返回 true|false",
	isElement: "是否为标签 \r\n jlpm.isElement(value); \r\n 返回 true|false",
	isEmpty: "是否为空 \r\n jlpm.isEmpty(value); \r\n 返回 true|false",
	isEmptyObject: "是否为空对象 \r\n jlpm.isEmptyObject(value); \r\n 返回 true|false",
	isFunction: "是否为function \r\n jlpm.isFunction(value); \r\n 返回 true|false",
	isHash: "是否为hash \r\n jlpm.isHash(value); \r\n 返回 true|false",
	isHidden: "是否为隐藏 \r\n jlpm.isHidden(value); \r\n 返回 true|false",
	isLocal: "是否为本地 \r\n jlpm.isLocal(value);",
	isNaN: "是否为NaN \r\n jlpm.isNaN(value); \r\n 返回 true|false",
	isNative: "方法或函数是否本地所有 \r\n jlpm.isNative(value); \r\n 返回 true|false",
	isNodeList: "是否为NodeList \r\n jlpm.isNodeList(value); \r\n 返回 true|false",
	isNumeric: "是否为数字 \r\n jlpm.isNumeric(value); \r\n 返回 true|false",
	isPO: "是否为原型的对象 \r\n jlpm.isPO(value); \r\n 返回 true|false",
	isSingle: "是否为单一对象 \r\n jlpm.isSingle(value); \r\n 返回 true|false",
	isString: "是否为字符串 \r\n jlpm.isString(value); \r\n 返回 true|false",
	isTouch: "判断是否支持touch功能 \r\n jlpm.isTouch(); \r\n 返回 true|false",
	isVisible: "是否为显示 \r\n jlpm.isVisible(value); \r\n 返回 true|false",
	jsonp: "jsonp调用 \r\n jlpm.jsonp(url,function(){},{id:id,oncomplete:function(){});",
	loadon: "加载javascript文件或css样式文件 \r\n jlpm.loadon(url,function(){},{}); \r\n JS文件加载完成后执行参数中的function回调函数",
	map: "把每个元素通过函数传递到当前匹配集合中生成新的对象 \r\n jlpm.map(selecter, function(){});",
	merge: "合并两个数组，生成一个新的数组 \r\n jlpm.merge(array,array);",
	post: 'ajax post方法 \r\n jlpm.post(url, callback[, options]); \r\n []内为可选参数',
	preventDefault: "取消事件的默认动作 \r\n jlpm.preventDefault();",
	random: "获取随机数 \r\n jlpm.random();",
	replaceRN: "替换 \/r\/n 字符 \r\n jlpm.replaceRN('string');",
	replaceText: "替换文本 \r\n jlpm.replaceText('string',替换条件 ,替换为的文本, 范围true|false);",
	split: "字符串数组化 \r\n jlpm.split(原始文本, 间隔符[,索引]);",
	stopPropagation: "不再派发事件 \r\n jlpm.stopPropagation();",
	stringify: "序列化一个对象 \r\n jlpm.stringify(object); \r\n 返回序列化后的string，无法序列化的返回null",
	toArray: "对象数组化 \r\n jlpm.toArray(value);",
	tourl: "json对象转成URL参数 \r\n jlpm.tourl(data); \r\n 返回string对象",
	trim: "删除字符串的空格 \r\n jlpm.trim(string,位置);",
	type: "返回对象类型 \r\n jlpm.type(object);",
	ua: "取设备、浏览器等信息 \r\n jlpm.ua().browser;",
	urltojson: "URL参数字符串转成json对象 \r\n jlpm.urltojson(data); \r\n 返回json对象"
}).extend("touchhelp", {
	touch: "左右上下单指滑动 \r\n _$(selector).touch({callback:function(dir,scrollX){}}); \r\n dir返回方向,scrollX提供滚动条进度值",
	tap: "点击TAP \r\n _$(selector).tap(function(event,touch,type){}); \r\n type返回点击类型，双击或单击",
	isScrollShow: "是否有滚动条 \r\n _$(selector).isScrollShow(); \r\n 返回true|false",
	doubletap: "双击TAP \r\n _$(selector).doubletap(function(event,touch,type){});",
	singletap: "单击TAP \r\n _$(selector).singletap(function(event,touch,type){});"
}).extend("qaniHelp", {
	custom: "自定义动画，包括CSS3Transform动画 \r\n $(selector).custom({left:'0',top:'0'}[,'slow','elasticInOut']).play(); \r\n 或者 $(selector).custom({addClass:'classNameA'[,removeClass:'classNameB']}).play(); \r\n 或者 $(selector).custom({time:'1000'[,width:'200px',...]}).play();",
	defer: "暂缓执行动画并同时可完成一个任务 \r\n $(selector).custom({left:'0',top:'0'}).defer([function(){},]1000).play();",
	stop: "取消下一动画的执行 \r\n $(selector).stop();",
	show: "显示动画 \r\n $(selector).show();",
	hide: "隐藏动画 \r\n $(selector).hide();",
	toggle: "显示和隐藏动画切换 \r\n $(selector).hide().toggle();"
});
